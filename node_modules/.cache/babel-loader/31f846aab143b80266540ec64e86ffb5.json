{"ast":null,"code":"import axios from 'axios';\nexport function requestLogin(username, password) {\n  return axios.post('https://team-kraken-questionbox.herokuapp.com/auth/token/login', {\n    username: username,\n    password: password\n  });\n}\nexport function requestLogout(token) {\n  return axios.post('https://team-kraken-questionbox.herokuapp.com/auth/token/logout', {\n    headers: {\n      Authorization: `Token ${token}`\n    }\n  });\n}\nexport function requestUser(token, username) {\n  return fakeUserRequest(token, username);\n}\nexport function requestQuestions(token) {\n  return getQuestionList(token);\n}\n\nfunction getQuestionList(token) {\n  if (token) {\n    return axios.get('https://team-kraken-questionbox.herokuapp.com/questions').then(res => res);\n  }\n}\n\nfunction fakeUserRequest(token) {\n  // here I am faking an api response that\n  // gives me a user object\n  return new Promise((resolve, reject) => {\n    if (token) {\n      resolve( // this is a fake user object\n      {\n        id: 1,\n        username: 'username',\n        // I am using a lirbary called dayjs that\n        // makes working with datetime in JS a litte simpler\n        created_at: '2021-07-22',\n        avatar_url: 'https://tinyurl.com/mwkjx4nh',\n        questions: [{\n          id: '1',\n          title: 'centering',\n          text: 'how do i center a div?',\n          username: 'roan',\n          created_at: '8 years ago',\n          favorited: 'false',\n          answers: answers\n        }, {\n          id: '2',\n          title: 'new here',\n          text: 'how do i post a question?',\n          username: 'emily',\n          created_at: 'tomorrow woah crazy',\n          favorited: 'false',\n          answers: answers\n        }],\n        answers: [{\n          id: '1',\n          text: 'stufffffff',\n          username: 'shaune',\n          approved: 'false',\n          favorited: 'false',\n          created_at: '0.00007 seconds ago'\n        }, {\n          id: '2',\n          text: 'whyd you do it like that',\n          username: 'roan',\n          approved: 'false',\n          favorited: 'false',\n          created_at: '3 days ago'\n        }]\n      });\n    }\n\n    reject(new Error('Authentication failed'));\n  });\n}\n\nfunction fakeQuestionDetail(token, id) {\n  return new Promise((resolve, reject) => {\n    if (token && id) {\n      resolve({});\n    }\n  });\n}\n\nfunction fakeCreateQuestion(token, question) {\n  return new Promise((resolve, reject) => {\n    if (token && question) {\n      resolve('your question has been posted');\n    }\n\n    reject(new Error('your question was not posted'));\n  });\n}\n\nfunction fakeCreateAnswer(token, questionID, answer) {\n  return new Promise((resolve, reject) => {\n    if (token && questionID && answer) {\n      resolve('your answer has been posted');\n    }\n\n    reject(new Error('your answer was not posted'));\n  });\n}","map":{"version":3,"sources":["/Users/roanblanchard/momentum-assignments/team-project-questionbox-team-kraken-fe/questionbox/src/api.js"],"names":["axios","requestLogin","username","password","post","requestLogout","token","headers","Authorization","requestUser","fakeUserRequest","requestQuestions","getQuestionList","get","then","res","Promise","resolve","reject","id","created_at","avatar_url","questions","title","text","favorited","answers","approved","Error","fakeQuestionDetail","fakeCreateQuestion","question","fakeCreateAnswer","questionID","answer"],"mappings":"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","sourcesContent":["import axios from 'axios'\n\n\nexport function requestLogin (username, password) {\n  return axios.post('https://team-kraken-questionbox.herokuapp.com/auth/token/login', {\n    username: username,\n    password: password,\n  })\n}\n\nexport function requestLogout(token) {\n    return axios.post('https://team-kraken-questionbox.herokuapp.com/auth/token/logout', {\n        headers: { Authorization: `Token ${token}` }\n    })\n}\n\nexport function requestUser (token, username) {\n  return fakeUserRequest(token, username)\n}\n\nexport function requestQuestions (token) {\n  return getQuestionList(token)\n}\n\nfunction getQuestionList(token) {\n    if (token) {\n        return axios.get('https://team-kraken-questionbox.herokuapp.com/questions')\n        .then(res => res)\n    }\n}\n\n\nfunction fakeUserRequest (token) {\n  // here I am faking an api response that\n  // gives me a user object\n  return new Promise((resolve, reject) => {\n    if (token) {\n      resolve(\n        // this is a fake user object\n        {\n          id: 1,\n          username: 'username',\n          // I am using a lirbary called dayjs that\n          // makes working with datetime in JS a litte simpler\n          created_at: '2021-07-22',\n          avatar_url: 'https://tinyurl.com/mwkjx4nh',\n          questions: [{\n            id: '1',\n            title: 'centering',\n            text: 'how do i center a div?',\n            username: 'roan',\n            created_at: '8 years ago',\n            favorited: 'false',\n            answers: answers\n          },\n          {\n            id: '2',\n            title: 'new here',\n            text: 'how do i post a question?',\n            username: 'emily',\n            created_at: 'tomorrow woah crazy',\n            favorited: 'false',\n            answers: answers\n          }],\n          answers: [{\n            id: '1',\n            text: 'stufffffff',\n            username: 'shaune',\n            approved: 'false',\n            favorited: 'false',\n            created_at: '0.00007 seconds ago'\n          },\n          {\n            id: '2',\n            text: 'whyd you do it like that',\n            username: 'roan',\n            approved: 'false',\n            favorited: 'false',\n            created_at: '3 days ago'\n          }]\n        })\n    }\n    reject(new Error('Authentication failed'))\n  })\n}\n\n\nfunction fakeQuestionDetail (token, id) {\n  return new Promise((resolve, reject) => {\n    if (token && id) {\n      resolve({\n        \n      })\n    }\n  })\n}\n\nfunction fakeCreateQuestion (token, question) {\n  return new Promise((resolve, reject) => {\n    if (token && question) {\n      resolve(\n        'your question has been posted'\n      )\n    }\n    reject(new Error('your question was not posted'))\n  })\n}\n\nfunction fakeCreateAnswer (token, questionID, answer) {\n  return new Promise((resolve, reject) => {\n    if (token && questionID && answer) {\n      resolve(\n        'your answer has been posted'\n      )\n    }\n    reject(new Error('your answer was not posted'))\n  })\n}\n"]},"metadata":{},"sourceType":"module"}