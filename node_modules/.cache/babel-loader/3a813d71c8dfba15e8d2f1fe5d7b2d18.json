{"ast":null,"code":"import { useEffect } from 'react';\nimport useLocalStorageStateBase from './useLocalStorageStateBase';\n/**\n * Used to track usages of `useLocalStorageState()` with identical `key` values. If we encounter\n * duplicates we throw an error to the user telling them to use `createLocalStorageStateHook`\n * instead.\n */\n\nconst initializedStorageKeys = new Set();\nexport default function useLocalStorageState(key, defaultValue) {\n  const value = useLocalStorageStateBase(key, defaultValue);\n  /**\n   * Detects incorrect usage of the library and throws an error with a suggestion how to fix it.\n   */\n\n  useEffect(() => {\n    if (initializedStorageKeys.has(key)) {\n      throw new Error(`When using the same key in multiple places use createLocalStorageStateHook('${key}'): ` + `https://github.com/astoilkov/use-local-storage-state#create-local-storage-state-hook`);\n    } else {\n      initializedStorageKeys.add(key);\n    }\n\n    return () => void initializedStorageKeys.delete(key);\n  }, [key]);\n  return value;\n}","map":{"version":3,"sources":["/Users/roanblanchard/momentum-assignments/team-project-questionbox-team-kraken-fe/questionbox/node_modules/use-local-storage-state/es/src/useLocalStorageState.js"],"names":["useEffect","useLocalStorageStateBase","initializedStorageKeys","Set","useLocalStorageState","key","defaultValue","value","has","Error","add","delete"],"mappings":"AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,OAAOC,wBAAP,MAAqC,4BAArC;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,sBAAsB,GAAG,IAAIC,GAAJ,EAA/B;AACA,eAAe,SAASC,oBAAT,CAA8BC,GAA9B,EAAmCC,YAAnC,EAAiD;AAC5D,QAAMC,KAAK,GAAGN,wBAAwB,CAACI,GAAD,EAAMC,YAAN,CAAtC;AACA;AACJ;AACA;;AACIN,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIE,sBAAsB,CAACM,GAAvB,CAA2BH,GAA3B,CAAJ,EAAqC;AACjC,YAAM,IAAII,KAAJ,CAAW,+EAA8EJ,GAAI,MAAnF,GACX,sFADC,CAAN;AAEH,KAHD,MAIK;AACDH,MAAAA,sBAAsB,CAACQ,GAAvB,CAA2BL,GAA3B;AACH;;AACD,WAAO,MAAM,KAAKH,sBAAsB,CAACS,MAAvB,CAA8BN,GAA9B,CAAlB;AACH,GATQ,EASN,CAACA,GAAD,CATM,CAAT;AAUA,SAAOE,KAAP;AACH","sourcesContent":["import { useEffect } from 'react';\nimport useLocalStorageStateBase from './useLocalStorageStateBase';\n/**\n * Used to track usages of `useLocalStorageState()` with identical `key` values. If we encounter\n * duplicates we throw an error to the user telling them to use `createLocalStorageStateHook`\n * instead.\n */\nconst initializedStorageKeys = new Set();\nexport default function useLocalStorageState(key, defaultValue) {\n    const value = useLocalStorageStateBase(key, defaultValue);\n    /**\n     * Detects incorrect usage of the library and throws an error with a suggestion how to fix it.\n     */\n    useEffect(() => {\n        if (initializedStorageKeys.has(key)) {\n            throw new Error(`When using the same key in multiple places use createLocalStorageStateHook('${key}'): ` +\n                `https://github.com/astoilkov/use-local-storage-state#create-local-storage-state-hook`);\n        }\n        else {\n            initializedStorageKeys.add(key);\n        }\n        return () => void initializedStorageKeys.delete(key);\n    }, [key]);\n    return value;\n}\n"]},"metadata":{},"sourceType":"module"}