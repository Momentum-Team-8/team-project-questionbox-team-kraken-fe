{"ast":null,"code":"import axios from 'axios';\nexport function requestLogin(username, password) {\n  return axios.post('https://team-kraken-questionbox.herokuapp.com/auth/token/login', {\n    username: username,\n    password: password\n  });\n}\nexport function requestLogout(token) {\n  return axios.post('https://team-kraken-questionbox.herokuapp.com/auth/token/logout', {\n    headers: {\n      Authorization: `Token ${token}`,\n      'Content-Type': 'application/json'\n    }\n  }).then(response => response);\n}\nexport function requestUser(token, username) {\n  return fakeUserRequest(token, username);\n}\nexport function requestQuestions(token) {\n  return getQuestionList(token);\n}\n\nfunction getQuestionList(token) {\n  if (token) {\n    return axios.get('https://team-kraken-questionbox.herokuapp.com/questions').then(res => res);\n  }\n}\n\nfunction fakeUserRequest(token) {\n  // here I am faking an api response that\n  // gives me a user object\n  return new Promise((resolve, reject) => {\n    if (token) {\n      resolve();\n    }\n\n    reject(new Error('Authentication failed'));\n  });\n}\n\nfunction fakeQuestionDetail(token, id) {\n  return new Promise((resolve, reject) => {\n    if (token && id) {\n      resolve({});\n    }\n  });\n}\n\nfunction fakeCreateQuestion(token, question) {\n  return new Promise((resolve, reject) => {\n    if (token && question) {\n      resolve('your question has been posted');\n    }\n\n    reject(new Error('your question was not posted'));\n  });\n}\n\nfunction fakeCreateAnswer(token, questionID, answer) {\n  return new Promise((resolve, reject) => {\n    if (token && questionID && answer) {\n      resolve('your answer has been posted');\n    }\n\n    reject(new Error('your answer was not posted'));\n  });\n}","map":{"version":3,"sources":["/Users/roanblanchard/momentum-assignments/team-project-questionbox-team-kraken-fe/questionbox/src/api.js"],"names":["axios","requestLogin","username","password","post","requestLogout","token","headers","Authorization","then","response","requestUser","fakeUserRequest","requestQuestions","getQuestionList","get","res","Promise","resolve","reject","Error","fakeQuestionDetail","id","fakeCreateQuestion","question","fakeCreateAnswer","questionID","answer"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAGA,OAAO,SAASC,YAAT,CAAuBC,QAAvB,EAAiCC,QAAjC,EAA2C;AAChD,SAAOH,KAAK,CAACI,IAAN,CAAW,gEAAX,EAA6E;AAClFF,IAAAA,QAAQ,EAAEA,QADwE;AAElFC,IAAAA,QAAQ,EAAEA;AAFwE,GAA7E,CAAP;AAID;AAED,OAAO,SAASE,aAAT,CAAuBC,KAAvB,EAA8B;AACjC,SAAON,KAAK,CAACI,IAAN,CAAW,iEAAX,EACP;AACIG,IAAAA,OAAO,EAAE;AACLC,MAAAA,aAAa,EAAG,SAAQF,KAAM,EADzB;AAEL,sBAAgB;AAFX;AADb,GADO,EAONG,IAPM,CAOAC,QAAD,IAAcA,QAPb,CAAP;AAQH;AAED,OAAO,SAASC,WAAT,CAAsBL,KAAtB,EAA6BJ,QAA7B,EAAuC;AAC5C,SAAOU,eAAe,CAACN,KAAD,EAAQJ,QAAR,CAAtB;AACD;AAED,OAAO,SAASW,gBAAT,CAA2BP,KAA3B,EAAkC;AACvC,SAAOQ,eAAe,CAACR,KAAD,CAAtB;AACD;;AAED,SAASQ,eAAT,CAAyBR,KAAzB,EAAgC;AAC5B,MAAIA,KAAJ,EAAW;AACP,WAAON,KAAK,CAACe,GAAN,CAAU,yDAAV,EACNN,IADM,CACDO,GAAG,IAAIA,GADN,CAAP;AAEH;AACJ;;AAGD,SAASJ,eAAT,CAA0BN,KAA1B,EAAiC;AAC/B;AACA;AACA,SAAO,IAAIW,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,QAAIb,KAAJ,EAAW;AACTY,MAAAA,OAAO;AAGR;;AACDC,IAAAA,MAAM,CAAC,IAAIC,KAAJ,CAAU,uBAAV,CAAD,CAAN;AACD,GAPM,CAAP;AAQD;;AAGD,SAASC,kBAAT,CAA6Bf,KAA7B,EAAoCgB,EAApC,EAAwC;AACtC,SAAO,IAAIL,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,QAAIb,KAAK,IAAIgB,EAAb,EAAiB;AACfJ,MAAAA,OAAO,CAAC,EAAD,CAAP;AAGD;AACF,GANM,CAAP;AAOD;;AAED,SAASK,kBAAT,CAA6BjB,KAA7B,EAAoCkB,QAApC,EAA8C;AAC5C,SAAO,IAAIP,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,QAAIb,KAAK,IAAIkB,QAAb,EAAuB;AACrBN,MAAAA,OAAO,CACL,+BADK,CAAP;AAGD;;AACDC,IAAAA,MAAM,CAAC,IAAIC,KAAJ,CAAU,8BAAV,CAAD,CAAN;AACD,GAPM,CAAP;AAQD;;AAED,SAASK,gBAAT,CAA2BnB,KAA3B,EAAkCoB,UAAlC,EAA8CC,MAA9C,EAAsD;AACpD,SAAO,IAAIV,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,QAAIb,KAAK,IAAIoB,UAAT,IAAuBC,MAA3B,EAAmC;AACjCT,MAAAA,OAAO,CACL,6BADK,CAAP;AAGD;;AACDC,IAAAA,MAAM,CAAC,IAAIC,KAAJ,CAAU,4BAAV,CAAD,CAAN;AACD,GAPM,CAAP;AAQD","sourcesContent":["import axios from 'axios'\n\n\nexport function requestLogin (username, password) {\n  return axios.post('https://team-kraken-questionbox.herokuapp.com/auth/token/login', {\n    username: username,\n    password: password,\n  })\n}\n\nexport function requestLogout(token) {\n    return axios.post('https://team-kraken-questionbox.herokuapp.com/auth/token/logout', \n    {\n        headers: { \n            Authorization: `Token ${token}`, \n            'Content-Type': 'application/json' \n        }\n    })\n    .then((response) => response)\n}\n\nexport function requestUser (token, username) {\n  return fakeUserRequest(token, username)\n}\n\nexport function requestQuestions (token) {\n  return getQuestionList(token)\n}\n\nfunction getQuestionList(token) {\n    if (token) {\n        return axios.get('https://team-kraken-questionbox.herokuapp.com/questions')\n        .then(res => res)\n    }\n}\n\n\nfunction fakeUserRequest (token) {\n  // here I am faking an api response that\n  // gives me a user object\n  return new Promise((resolve, reject) => {\n    if (token) {\n      resolve(\n        // this is a fake user object\n        )\n    }\n    reject(new Error('Authentication failed'))\n  })\n}\n\n\nfunction fakeQuestionDetail (token, id) {\n  return new Promise((resolve, reject) => {\n    if (token && id) {\n      resolve({\n        \n      })\n    }\n  })\n}\n\nfunction fakeCreateQuestion (token, question) {\n  return new Promise((resolve, reject) => {\n    if (token && question) {\n      resolve(\n        'your question has been posted'\n      )\n    }\n    reject(new Error('your question was not posted'))\n  })\n}\n\nfunction fakeCreateAnswer (token, questionID, answer) {\n  return new Promise((resolve, reject) => {\n    if (token && questionID && answer) {\n      resolve(\n        'your answer has been posted'\n      )\n    }\n    reject(new Error('your answer was not posted'))\n  })\n}\n"]},"metadata":{},"sourceType":"module"}