{"ast":null,"code":"import storage from './storage';\nimport { useEffect, useMemo, useRef, useState } from 'react';\nexport default function useLocalStorageStateBase(key, defaultValue) {\n  const defaultValueForKey = useMemo(() => {\n    const isCallable = value => typeof value === 'function';\n\n    return isCallable(defaultValue) ? defaultValue() : defaultValue; // disabling \"exhaustive-deps\" on purpose. we don't want to change the default state when\n    // the `defaultValue` is changed.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [key]);\n  const defaultState = useMemo(() => {\n    return {\n      value: storage.get(key, defaultValueForKey),\n      isPersistent: (() => {\n        /**\n         * We want to return `true` on the server. If you render a message based on\n         * `isPersistent` and the server returns `false` then the message will flicker until\n         * hydration is done:\n         * `{!isPersistent && <span>You changes aren't being persisted.</span>}`\n         */\n        if (typeof window === 'undefined') {\n          return true;\n        }\n\n        try {\n          // ulss = use-local-storage-state\n          // using shorthand to make library smaller in size\n          localStorage.setItem('__ulss', '#');\n          localStorage.removeItem('__ulss');\n          return true;\n        } catch (_a) {\n          return false;\n        }\n      })()\n    };\n  }, [key, defaultValueForKey]);\n  const [state, setState] = useState(defaultState);\n  const updateValue = useMemo(() => {\n    const fn = newValue => {\n      const isCallable = value => typeof value === 'function';\n\n      if (isCallable(newValue)) {\n        setState(state => ({\n          value: newValue(state.value),\n          isPersistent: storage.set(key, newValue(state.value))\n        }));\n      } else {\n        setState({\n          value: newValue,\n          isPersistent: storage.set(key, newValue)\n        });\n      }\n    };\n\n    fn.reset = () => {\n      storage.remove(key);\n      setState(state => ({\n        value: defaultValueForKey,\n        isPersistent: state.isPersistent\n      }));\n    };\n\n    return fn;\n  }, [key, defaultValueForKey]); // syncs changes across tabs and iframe's\n\n  useEffect(() => {\n    const onStorage = e => {\n      if (e.storageArea === localStorage && e.key === key) {\n        setState({\n          value: storage.get(key, defaultValueForKey),\n          isPersistent: true\n        });\n      }\n    };\n\n    window.addEventListener('storage', onStorage);\n    return () => window.removeEventListener('storage', onStorage);\n  }, [key, defaultValueForKey]);\n  const isFirstRender = useRef(true);\n  useEffect(() => {\n    // set the `defaultValue` in the localStorage on initial render:\n    // https://github.com/astoilkov/use-local-storage-state/issues/26\n    storage.set(key, defaultState.value);\n\n    if (isFirstRender.current) {\n      isFirstRender.current = false;\n      return;\n    } // update the state when the `key` property changes (not on first render because this will\n    // cause a second unnecessary render)\n\n\n    setState(defaultState);\n  }, [key, defaultState]);\n  return [state.value, updateValue, state.isPersistent];\n}","map":{"version":3,"sources":["/Users/roanblanchard/momentum-assignments/team-project-questionbox-team-kraken-fe/questionbox/node_modules/use-local-storage-state/es/src/useLocalStorageStateBase.js"],"names":["storage","useEffect","useMemo","useRef","useState","useLocalStorageStateBase","key","defaultValue","defaultValueForKey","isCallable","value","defaultState","get","isPersistent","window","localStorage","setItem","removeItem","_a","state","setState","updateValue","fn","newValue","set","reset","remove","onStorage","e","storageArea","addEventListener","removeEventListener","isFirstRender","current"],"mappings":"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","sourcesContent":["import storage from './storage';\nimport { useEffect, useMemo, useRef, useState } from 'react';\nexport default function useLocalStorageStateBase(key, defaultValue) {\n    const defaultValueForKey = useMemo(() => {\n        const isCallable = (value) => typeof value === 'function';\n        return isCallable(defaultValue) ? defaultValue() : defaultValue;\n        // disabling \"exhaustive-deps\" on purpose. we don't want to change the default state when\n        // the `defaultValue` is changed.\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [key]);\n    const defaultState = useMemo(() => {\n        return {\n            value: storage.get(key, defaultValueForKey),\n            isPersistent: (() => {\n                /**\n                 * We want to return `true` on the server. If you render a message based on\n                 * `isPersistent` and the server returns `false` then the message will flicker until\n                 * hydration is done:\n                 * `{!isPersistent && <span>You changes aren't being persisted.</span>}`\n                 */\n                if (typeof window === 'undefined') {\n                    return true;\n                }\n                try {\n                    // ulss = use-local-storage-state\n                    // using shorthand to make library smaller in size\n                    localStorage.setItem('__ulss', '#');\n                    localStorage.removeItem('__ulss');\n                    return true;\n                }\n                catch (_a) {\n                    return false;\n                }\n            })(),\n        };\n    }, [key, defaultValueForKey]);\n    const [state, setState] = useState(defaultState);\n    const updateValue = useMemo(() => {\n        const fn = (newValue) => {\n            const isCallable = (value) => typeof value === 'function';\n            if (isCallable(newValue)) {\n                setState((state) => ({\n                    value: newValue(state.value),\n                    isPersistent: storage.set(key, newValue(state.value)),\n                }));\n            }\n            else {\n                setState({\n                    value: newValue,\n                    isPersistent: storage.set(key, newValue),\n                });\n            }\n        };\n        fn.reset = () => {\n            storage.remove(key);\n            setState((state) => ({\n                value: defaultValueForKey,\n                isPersistent: state.isPersistent,\n            }));\n        };\n        return fn;\n    }, [key, defaultValueForKey]);\n    // syncs changes across tabs and iframe's\n    useEffect(() => {\n        const onStorage = (e) => {\n            if (e.storageArea === localStorage && e.key === key) {\n                setState({\n                    value: storage.get(key, defaultValueForKey),\n                    isPersistent: true,\n                });\n            }\n        };\n        window.addEventListener('storage', onStorage);\n        return () => window.removeEventListener('storage', onStorage);\n    }, [key, defaultValueForKey]);\n    const isFirstRender = useRef(true);\n    useEffect(() => {\n        // set the `defaultValue` in the localStorage on initial render:\n        // https://github.com/astoilkov/use-local-storage-state/issues/26\n        storage.set(key, defaultState.value);\n        if (isFirstRender.current) {\n            isFirstRender.current = false;\n            return;\n        }\n        // update the state when the `key` property changes (not on first render because this will\n        // cause a second unnecessary render)\n        setState(defaultState);\n    }, [key, defaultState]);\n    return [state.value, updateValue, state.isPersistent];\n}\n"]},"metadata":{},"sourceType":"module"}