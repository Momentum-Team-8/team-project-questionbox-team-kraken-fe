{"ast":null,"code":"/**\n * Abstraction for localStorage that uses an in-memory fallback when localStorage throws an error.\n * Reasons for throwing an error:\n * - maximum quota is exceeded\n * - under Mobile Safari (since iOS 5) when the user enters private mode `localStorage.setItem()`\n *   will throw\n * - trying to access localStorage object when cookies are disabled in Safari throws\n *   \"SecurityError: The operation is insecure.\"\n */\nconst data = {};\nexport default {\n  get(key, defaultValue) {\n    var _a;\n\n    try {\n      return (_a = data[key]) !== null && _a !== void 0 ? _a : parseJSON(localStorage.getItem(key));\n    } catch (_b) {\n      return defaultValue;\n    }\n  },\n\n  set(key, value) {\n    try {\n      localStorage.setItem(key, JSON.stringify(value));\n      data[key] = undefined;\n      return true;\n    } catch (_a) {\n      data[key] = value;\n      return false;\n    }\n  },\n\n  remove(key) {\n    data[key] = undefined;\n    localStorage.removeItem(key);\n  }\n\n};\n/**\n * A wrapper for `JSON.parse()` which supports the return value of `JSON.stringify(undefined)`\n * which returns the string `\"undefined\"` and this method returns the value `undefined`.\n */\n\nfunction parseJSON(value) {\n  return value === 'undefined' ? undefined : // JSON.parse() doesn't accept non-string values, this is why we pass empty\n  // string which will throw an error which can be handled\n  JSON.parse(value !== null && value !== void 0 ? value : '');\n}","map":{"version":3,"sources":["/Users/roanblanchard/momentum-assignments/team-project-questionbox-team-kraken-fe/questionbox/node_modules/use-local-storage-state/es/src/storage.js"],"names":["data","get","key","defaultValue","_a","parseJSON","localStorage","getItem","_b","set","value","setItem","JSON","stringify","undefined","remove","removeItem","parse"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMA,IAAI,GAAG,EAAb;AACA,eAAe;AACXC,EAAAA,GAAG,CAACC,GAAD,EAAMC,YAAN,EAAoB;AACnB,QAAIC,EAAJ;;AACA,QAAI;AACA,aAAO,CAACA,EAAE,GAAGJ,IAAI,CAACE,GAAD,CAAV,MAAqB,IAArB,IAA6BE,EAAE,KAAK,KAAK,CAAzC,GAA6CA,EAA7C,GAAkDC,SAAS,CAACC,YAAY,CAACC,OAAb,CAAqBL,GAArB,CAAD,CAAlE;AACH,KAFD,CAGA,OAAOM,EAAP,EAAW;AACP,aAAOL,YAAP;AACH;AACJ,GATU;;AAUXM,EAAAA,GAAG,CAACP,GAAD,EAAMQ,KAAN,EAAa;AACZ,QAAI;AACAJ,MAAAA,YAAY,CAACK,OAAb,CAAqBT,GAArB,EAA0BU,IAAI,CAACC,SAAL,CAAeH,KAAf,CAA1B;AACAV,MAAAA,IAAI,CAACE,GAAD,CAAJ,GAAYY,SAAZ;AACA,aAAO,IAAP;AACH,KAJD,CAKA,OAAOV,EAAP,EAAW;AACPJ,MAAAA,IAAI,CAACE,GAAD,CAAJ,GAAYQ,KAAZ;AACA,aAAO,KAAP;AACH;AACJ,GApBU;;AAqBXK,EAAAA,MAAM,CAACb,GAAD,EAAM;AACRF,IAAAA,IAAI,CAACE,GAAD,CAAJ,GAAYY,SAAZ;AACAR,IAAAA,YAAY,CAACU,UAAb,CAAwBd,GAAxB;AACH;;AAxBU,CAAf;AA0BA;AACA;AACA;AACA;;AACA,SAASG,SAAT,CAAmBK,KAAnB,EAA0B;AACtB,SAAOA,KAAK,KAAK,WAAV,GACDI,SADC,GAED;AACE;AACAF,EAAAA,IAAI,CAACK,KAAL,CAAWP,KAAK,KAAK,IAAV,IAAkBA,KAAK,KAAK,KAAK,CAAjC,GAAqCA,KAArC,GAA6C,EAAxD,CAJR;AAKH","sourcesContent":["/**\n * Abstraction for localStorage that uses an in-memory fallback when localStorage throws an error.\n * Reasons for throwing an error:\n * - maximum quota is exceeded\n * - under Mobile Safari (since iOS 5) when the user enters private mode `localStorage.setItem()`\n *   will throw\n * - trying to access localStorage object when cookies are disabled in Safari throws\n *   \"SecurityError: The operation is insecure.\"\n */\nconst data = {};\nexport default {\n    get(key, defaultValue) {\n        var _a;\n        try {\n            return (_a = data[key]) !== null && _a !== void 0 ? _a : parseJSON(localStorage.getItem(key));\n        }\n        catch (_b) {\n            return defaultValue;\n        }\n    },\n    set(key, value) {\n        try {\n            localStorage.setItem(key, JSON.stringify(value));\n            data[key] = undefined;\n            return true;\n        }\n        catch (_a) {\n            data[key] = value;\n            return false;\n        }\n    },\n    remove(key) {\n        data[key] = undefined;\n        localStorage.removeItem(key);\n    },\n};\n/**\n * A wrapper for `JSON.parse()` which supports the return value of `JSON.stringify(undefined)`\n * which returns the string `\"undefined\"` and this method returns the value `undefined`.\n */\nfunction parseJSON(value) {\n    return value === 'undefined'\n        ? undefined\n        : // JSON.parse() doesn't accept non-string values, this is why we pass empty\n            // string which will throw an error which can be handled\n            JSON.parse(value !== null && value !== void 0 ? value : '');\n}\n"]},"metadata":{},"sourceType":"module"}